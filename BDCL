%=================================BDCL阻塞概率理论分析==================================%
%==================================Author: Haoyu Dai====================================%
%================================Latest Update: 2020/5/9================================%
function [B1_tot,B2_tot,B2_f,B2_m,B2_l]=BDCL(inc)
%此处Inc为主函数输入进来的增长量，输出B1_tot和B2_tot分别是均匀和非均匀情况下的阻塞概率。
lambda1=100*ones(1,30);
lambda2=[120,100,80,80,90,100,90,130,120,60,40,60,80,100,80,120,100,60,60,80,120,100,80,60,60,80,100,100,80,120];
mu=20;
m=10;
Aj1=lambda1*(1+inc/100)/mu;
Aj2=lambda2*(1+inc/100)/mu;
G1=zeros(1,30);%G1为均匀呼叫密度下的归一化系数
G2=zeros(1,30);%G2为非均匀呼叫密度下的归一化系数
               %G1和G2的每个元素i都是对应的以蜂窝i为中心做考虑的，蜂窝i为x1,蜂窝i+1为x2,蜂窝i-1为x3,所有的稳态概率之和。
for i=1:30
    if i==1    %没有x3,即没有i-1.
        for k=0:2*m
            for n=0:2*m-k
                G1(i)=G1(i)+Aj1(i)^k/factorial(k)*Aj1(i+1)^n/factorial(n);
                G2(i)=G2(i)+Aj2(i)^k/factorial(k)*Aj2(i+1)^n/factorial(n);
            end
        end
    elseif i==30   %没有x2,即没有i+1.
        for k=0:2*m
            for n=0:2*m-k
                G1(i)=G1(i)+Aj1(i)^k/factorial(k)*Aj1(i-1)^n/factorial(n);
                G2(i)=G2(i)+Aj2(i)^k/factorial(k)*Aj2(i-1)^n/factorial(n); 
            end
        end
    else      %i在2到29之间,左右皆有蜂窝.
        for k=0:2*m
            for n=0:2*m-k
                for t=0:2*m-k
                    G1(i)=G1(i)+Aj1(i)^k/factorial(k)*Aj1(i+1)^n/factorial(n)*Aj1(i-1)^t/factorial(t);
                    G2(i)=G2(i)+Aj2(i)^k/factorial(k)*Aj2(i+1)^n/factorial(n)*Aj2(i-1)^t/factorial(t);
                end
            end
        end
    end
end
%求概率P[x1,x2,x3]
cnt=(2*m+1)*(2*m+2)*(4*m+3)/6;
rows=cnt*28+(1+2*m+1)*(2*m+1);
P1=zeros(rows,5);   %P1矩阵对应的是均匀到达
P2=zeros(rows,5);   %P2矩阵对应的是非均匀到达
                    %矩阵P1和P2的前三个元素分别代表x1=,x2=,x3=,第四个元素代表相应的稳态概率,第五个元素代表中心蜂窝i.
t=1;
for i=1:30
    if i==1         %i==1,x3=0
        for j=0:2*m
            for k=0:2*m-j
                P1(t,1)=j;
                P1(t,2)=k;
                P1(t,3)=0;
                P1(t,4)=Aj1(i)^j/factorial(j)*Aj1(i+1)^k/factorial(k)/G1(i);
                P1(t,5)=i;
                P2(t,1)=j;
                P2(t,2)=k;
                P2(t,3)=0;
                P2(t,4)=Aj2(i)^j/factorial(j)*Aj2(i+1)^k/factorial(k)/G2(i);
                P2(t,5)=i;
                t=t+1;
            end
        end
    elseif i>=2&&i<=29  %i,i-1,i+1都存在
        for k=0:2*m
            for n=0:2*m-k
                for j=0:2*m-k
                    P1(t,1)=k;
                    P1(t,2)=n;
                    P1(t,3)=j;
                    P1(t,4)=Aj1(i)^k/factorial(k)*Aj1(i+1)^n/factorial(n)*Aj1(i-1)^j/factorial(j)/G1(i);
                    P1(t,5)=i;
                    P2(t,1)=k;
                    P2(t,2)=n;
                    P2(t,3)=j;
                    P2(t,4)=Aj2(i)^k/factorial(k)*Aj2(i+1)^n/factorial(n)*Aj2(i-1)^j/factorial(j)/G2(i);
                    P2(t,5)=i;
                    t=t+1;
                end
            end
        end
    else               %i==30,i+1不存在，即x2=0
           for j=0:2*m
              for k=0:2*m-j
                P1(t,1)=j;
                P1(t,2)=0;
                P1(t,3)=k;
                P1(t,4)=Aj1(i)^j/factorial(j)*Aj1(i-1)^k/factorial(k)/G1(i);
                P1(t,5)=i;
                P2(t,1)=j;
                P2(t,2)=0;
                P2(t,3)=k;
                P2(t,4)=Aj2(i)^j/factorial(j)*Aj2(i-1)^k/factorial(k)/G2(i);
                P2(t,5)=i;
                t=t+1;
              end
           end
    end
end
B1=zeros(1,30);
B2=zeros(1,30);
[r,~]=size(P1);
for j=1:30
  b=find(P1(:,5)==j);
  L=length(b);
  for i=1:L     
        if (P1(b(i),1)+P1(b(i),2)==2*m)&&(P1(b(i),1)+P1(b(i),3)<=2*m)
            B1(j)=B1(j)+P1(b(i),4);
        elseif (P1(b(i),1)+P1(b(i),3)==2*m)&&(P1(b(i),1)+P1(b(i),2)<2*m)
            B1(j)=B1(j)+P1(b(i),4);
        end
        if (P2(b(i),1)+P2(b(i),2)==2*m)&&(P2(b(i),1)+P2(b(i),3)<=2*m)
            B2(j)=B2(j)+P2(b(i),4);
        elseif (P2(b(i),1)+P2(b(i),3)==2*m)&&(P2(b(i),1)+P2(b(i),2)<2*m)
            B2(j)=B2(j)+P2(b(i),4);
        end
  end
end
lambda1_tot=sum(lambda1);
lambda2_tot=sum(lambda2);
B1_tot=0;
B2_tot=0;
for i=1:30
    B1_tot=B1_tot+lambda1(i)*B1(i)/lambda1_tot;
    B2_tot=B2_tot+lambda2(i)*B2(i)/lambda2_tot;
end
B2_f=B2(1);
B2_m=B2(10);
B2_l=B2(30);
end
